<launch>

    <!--Launch gazebo model + world -->
    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find scara_v2_full_gazebo)/worlds/scara_v2.world"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(find scara_v2_full_description)/urdf/scara_and_rt_urdf.xacro'" />

    <!-- Load the URDF into the ROS Parameter Server  OLD -->
    <!--<param name="robot_description" command="$(find xacro)/xacro &#45;&#45;inorder '$(find scara_v2_description)/urdf/scara_v2_with_gripper_urdf.xacro'" />-->


    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model scara_and_rt -param robot_description"/>


    <!-- Launch controllers -->
    <rosparam file="$(find scara_v2_full_control)/config/scara_and_rt_control.yaml" command="load"/>
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
          output="screen" ns="/scara_and_rt" args="joint1_position_controller joint2_position_controller joint3_position_controller joint4_position_controller joint5_position_controller rt_joint1_position_controller joint_state_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
          respawn="false" output="screen">
        <remap from="/joint_states" to="/scara_and_rt/joint_states" />
    </node>

</launch>